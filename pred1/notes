Basic language constructs, lists, tuples
  .lhs - writing text, we write code by adding > on the begining
  .hs - writing code, we write comments by adding -- on the beggining
  loading file with :l <name>
  reloading file with :r
  funcitons are the same as variables in haskell
  functions should be lower camel case
  show => a polymorphic function, can be applied to any type
  $ - means apply (instead of () )

  some built-in functions: max, min, succ, div, mod, pred 
  infix function call - adding backqoute around funciton name => arg1 'func' arg2
  non-infix function call - func arg1 arg2
  infix operator call - adding () around operaotr => (*) arg1 arg2
  when we use interpreter we can;t use = statement; we have to put 'let'  
    same for functions
  
  Strings and characters
   strings are defind with double quotes
   chars are defined with single quotes

   concatenate strings: ++ operator => <str1> ++ <str2>
   lenght - function, returns lenght of the string

  If-then-else statement
    if <cond> then <val1> else <val2>
    
    True and False are keywords
    we should avoid returning booleans after True/False test; instead just use operator

    strings have <,>,.. operators (alphabetical order)

  Guards - |
    should be intended - using spaces

  Lists
    cool thing in haskell
    operator :, so called "cons"
      l1'  = (1:(2:(3:([])))) - enables recursion on lists
      l1'' = 1:2:3:[]

    extracting parts of list: head, tail, init, last
    taking and dropping the initial part of a list: take, drop
    
    Strings are lists of characters
    
    lists cannot be heterogeneous (contain elements of different types)

    Replicate, cycle, repeat:
      built-in functions

    Concat:
      takes a list of lists and concatenates them into one
      just one level deep
    
    List intervals
      l12 = [1..12]
      l13 = [1,3..12]

    Minimum and Maximum of lists:
      minimum
      maximum

    Looking up elements from a list:
      !! operator
      [1,3..100] !! 17 = 35
      can be combined in sequence if we have a list of lists

    chr:
      returns a char from a given number

    Logical operations on lists:
     and, or 
    
    Removing duplicates from lists:
      nub

    Sorting lists:
      sort

    Checking list membership:
      elem and notElem

    List comprehensions:
      doubles = [x * 2 | x <- [1..10]]

  Exercise 1:
     1.1: define concat3 that concatenates three strings, but drops the middle
          one if it's shorter than 2 characters 

     1.2: expand showSalary so it checks if the salary is negative, if True output some message

     1.3: showDigit, spells out a digit 1 -> one, 2 -> two, .... using guards
          showDecimal - spells out a two decimal number

  Exercise 2:
    2.1: define a function that returns a list without the first and the last
         three elements

    2.2: define a function initials s1 s2, that takes a person's name and a
         surname as input and returns a string consisting of person initials

    2.3: define a functions that concatenates two strings so the longest comes
         first

    2.4: define a function safeHead that returns an empty list of 'l' is an
         empty list, otherwise it returns its first element

    2.5: define a function hasDuplicates, that checks whether a list contains
         duplicate elements 
